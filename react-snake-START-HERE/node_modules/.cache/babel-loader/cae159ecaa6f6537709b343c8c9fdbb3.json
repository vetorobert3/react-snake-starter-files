{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\vrram\\\\react-snake-starter-files\\\\react-snake-START-HERE\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\vrram\\\\react-snake-starter-files\\\\react-snake-START-HERE\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from './useInterval';\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from './constants';\n\nconst App = () => {\n  const canvasRef = useRef(null);\n\n  const _useState = useState(SNAKE_START),\n        _useState2 = _slicedToArray(_useState, 2),\n        snake = _useState2[0],\n        setSnake = _useState2[1];\n\n  const _useState3 = useState(APPLE_START),\n        _useState4 = _slicedToArray(_useState3, 2),\n        apple = _useState4[0],\n        setApple = _useState4[1];\n\n  const _useState5 = useState([0, -1]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dir = _useState6[0],\n        setDir = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        speed = _useState8[0],\n        setSpeed = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        gameOver = _useState10[0],\n        setGameOver = _useState10[1];\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () => {};\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = () => {};\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext('2d');\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = 'lightgreen';\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = 'red';\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  useInterval(() => gameLoop(), speed);\n  return React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    style: {\n      border: '1px solid black'\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), gameOver && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"GAME OVER!\"), React.createElement(\"button\", {\n    onClick: startGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/vrram/react-snake-starter-files/react-snake-START-HERE/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","startGame","endGame","moveSnake","keyCode","createApple","checkCollision","piece","snk","segment","checkAppleCollision","gameLoop","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport { useInterval } from './useInterval';\r\nimport {\r\n  CANVAS_SIZE,\r\n  SNAKE_START,\r\n  APPLE_START,\r\n  SCALE,\r\n  SPEED,\r\n  DIRECTIONS\r\n} from './constants';\r\n\r\nconst App = () => {\r\n  const canvasRef = useRef(null);\r\n  const [snake, setSnake] = useState(SNAKE_START);\r\n  const [apple, setApple] = useState(APPLE_START);\r\n  const [dir, setDir] = useState([0, -1]);\r\n  const [speed, setSpeed] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  \r\n  const startGame = () => {\r\n    setSnake(SNAKE_START);\r\n    setApple(APPLE_START);\r\n    setDir([0, -1]);\r\n    setSpeed(SPEED);\r\n    setGameOver(false);\r\n  }\r\n\r\n  const endGame = () => {\r\n    setSpeed(null);\r\n    setGameOver(true);\r\n  }\r\n\r\n  const moveSnake = ({ keyCode }) =>  \r\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\r\n\r\n  const createApple = () =>{\r\n\r\n  }\r\n\r\n  const checkCollision = (piece, snk = snake) => {\r\n    if (\r\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\r\n      piece[0] < 0 ||\r\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\r\n      piece[1] < 0\r\n    )\r\n      return true;\r\n    for (const segment of snk) {\r\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\r\n    }\r\n  return false;\r\n  }\r\n\r\n  const checkAppleCollision = () => {\r\n\r\n  }\r\n\r\n  const gameLoop = () => {\r\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\r\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\r\n    snakeCopy.unshift(newSnakeHead);\r\n    if (checkCollision(newSnakeHead)) endGame();\r\n    snakeCopy.pop();\r\n    setSnake(snakeCopy);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const context = canvasRef.current.getContext('2d');\r\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\r\n    context.fillStyle = 'lightgreen';\r\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\r\n    context.fillStyle = 'red';\r\n    context.fillRect(apple[0], apple[1], 1, 1);\r\n  }, [snake, apple, gameOver])\r\n\r\n  useInterval(() => gameLoop(), speed);\r\n\r\n  return(\r\n    <div role='button' tabIndex='0' onKeyDown={e => moveSnake(e)}>\r\n      <canvas\r\n        style={{border: '1px solid black'}}\r\n        ref={canvasRef}\r\n        width={`${CANVAS_SIZE[0]}px`}\r\n        height={`${CANVAS_SIZE[1]}px`}\r\n      />\r\n      {gameOver && <div>GAME OVER!</div>}\r\n      <button onClick={startGame}>Start Game</button>\r\n    </div>\r\n  )\r\n}\r\n  \r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}